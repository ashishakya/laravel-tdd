<?php

namespace Tests\Feature;

use App\Models\Label;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Arr;
use Tests\TestCase;

/**
 *
 */
class LabelTest extends TestCase
{
    use RefreshDatabase;

    /**
     * @var \Illuminate\Database\Eloquent\Collection|\Illuminate\Database\Eloquent\Model
     */
    private $user;

    /**
     *
     */
    public function setup(): void
    {
        parent::setup(); // TODO: Change the autogenerated stub
        $this->user = $this->authUser();
    }

    /**
     * @test
     */
    public function user_can_create_new_label()
    {
        $label = Label::factory()->raw();

        $this->postJson(route("api.labels.store"), $label)
             ->assertCreated();

        $this->assertDatabaseHas(
            "labels",
            [
                "title"  => Arr::get($label, "title"),
                "colour" => Arr::get($label, "colour"),
            ]
        );
    }

    /**
     * @test
     */
    public function user_can_delete_a_label()
    {
        $label = $this->createLabel();

        $this->deleteJson(route("api.labels.destroy", $label->id))
             ->assertNoContent();

        $this->assertDatabaseMissing('labels', ['id' => $label->id]);
    }

    public function test_user_can_update_label()
    {
        $label = $this->createLabel();

        $this->patchJson(
            route("api.labels.update", $label->id),
            [
                "title"  => "updated title",
                "colour" => "update colour",
            ]
        )->assertOk();

        $this->assertDatabaseHas('labels', ["title" => "updated title"]);
    }

    public function test_fetch_all_label_for_a_user()
    {
        $label = $this->createLabel(["user_id" => $this->user->id]);
        $this->createLabel();

        $response = $this->getJson(route("api.labels.index"))
             ->assertOk();

        $this->assertEquals($response->json()[0]["title"], $label->title);
    }
}
